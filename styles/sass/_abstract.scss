/* =========================
 *  Variables & Custom Properties
 * ======================== */

/*  Breakpoints */
// Using Sas variable because CSS Custom Properties don't work inside media queries.
$desktop: 1000px;
$mw: 1440px;

:root {
	/* Colors */
	--clr-primary: #0e902d;
	--clr-accent: #f8e71c;
	--clr-white: #ffffff;
	--text-main: #2c2c2c;
	--text-secondary: #074115;
	--text-inverse: var(--clr-white);

	--bg-primary: #f0efed;
	--bg-secondary: var(--clr-white);
	--clr-navbar: rgb(20, 20, 20);

	/* Typography */
	--ff-body: Roboto;
	--ff-heading: 'Josefin Sans';
	--ff-body: Roboto;
	--ff-heading: 'Josefin Sans';

	/* Spacing */

	// horizontal paddings inside container
	--px-xs: Min(Max(0.5rem, 4vw), 1em);
	--px: Min(Max(1rem, 8vw), 8rem);
	// vertical padding inside container
	--py: Min(Max(3rem, 10vw), 5rem);
	// element-specific
	--hero-height: Min(Max(15rem, 30vw), 35rem);
	--hero-main-height: Min(Max(15rem, 45vw), 40rem);
	--form-border: 1px solid var(--clr-primary);
	--shadow-offset: 1rem;

	/* Z-Indexes */
	--z-menu-btn: 1000;
	--z-menu-modal: 500;
	--z-shadow: 199;
	--z-shadow-overlay: 200;
	--z-card: 300;
}

/* =========================
 *  Mixins
 * ======================== */

@mixin underline-after {
	&::after {
		content: '';
		display: block;
		position: absolute;
		bottom: 0;
		left: 0;
		background: var(--text-inverse);
		width: 100%;
		height: 1px;
		transform: scaleX(0);
		transform-origin: left;
		opacity: 0;
		transition: transform 200ms ease;
	}
}

@mixin underline-after-hover {
	&::after {
		transform: scaleX(1);
		opacity: 1;
	}
}

/* =========================
 *  Utils
 * ======================== */

.sr-only:not(:focus):not(:active) {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	border: 0;
	padding: 0;
	white-space: nowrap;
	clip-path: inset(100%);
	clip: rect(00 0 0);
	overflow: hidden;
}

.clearfix:after {
	visibility: hidden;
	display: block;
	font-size: 0;
	content: '';
	clear: both;
	height: 0;
}

.container {
	width: 100%;
	max-width: $mw;
	margin: 0 auto;
	padding-left: var(--px);
	padding-right: var(--px);
}

.center {
	text-align: center;
	margin-left: auto;
	margin-right: auto;
}

// Could not use `box-shadow` because some shadows from the design are shorter than the box that they are coming from.
// You can control offset length but cannot make the shadow shorter than the element.
.shadow {
	position: relative;
	// give higher z-index to the all children that are siblings to the pseudo-element(shadow)
	// this will not be applied to the pseudo element because the selectors don't include what's not actually present in DOM
	& * {
		position: relative;
		z-index: var(--z-shadow-overlay);
	}

	// shadow offset toward bottom right
	&::after {
		content: '';
		display: block;
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: var(--clr-accent);
		transform: translate(var(--shadow-offset), var(--shadow-offset));
		z-index: var(--z-shadow);
	}

	// shadow offset toward bottom left
	&.shadow-left {
		// Move the whole box to the right to make room for shadow.
		// Shadow will be aligned to where the box used to be
		// (Otherwise the shadow can overflow the parent that has 0 padding.)
		transform: translate(var(--shadow-offset), 0);

		&::after {
			transform: translate(
				calc(-1 * var(--shadow-offset)),
				var(--shadow-offset)
			);
		}
	}
}

.hero-heading {
	min-height: 2em;
}

/* Color-related Utils*/
.accent {
	color: var(--clr-accent);
}

.bg-secondary {
	background-color: var(--bg-secondary);
}

.active {
	// apply to itself and all of its descendants
	&,
	& * {
		color: var(--clr-accent);
	}
}

.find-more {
	font-style: italic;
	font-weight: bold;
	color: var(--text-secondary);
}
